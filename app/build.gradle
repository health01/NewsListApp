plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
}

def getGitLatestTag() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--abbrev=0'
            standardOutput = stdout
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return "v2.0.1"
    }
}

private Integer generateVersionCode() {
    // This creates version code is format <minsdkversion>0<major><minor><patch>
    // For example for min sdk version 26 and version name 2.4.3: 230020403
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0'
        standardOutput = stdout
    }
    // version tags in format v1.0.0
    def tagArray = stdout.toString().trim().replaceAll("v", "").tokenize(".")
    def versionMajor = tagArray.get(0).toInteger()
    def versionMinor = tagArray.get(1).toInteger()
    def versionPatch = tagArray.get(2).toInteger()
    return (ext.minSdkVersion * 10000000) + (versionMajor * 10000) + (versionMinor * 100) + versionPatch
}

println "Running version " + getGitLatestTag() + " version code " + generateVersionCode()

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.jason.test.newsapp"
        minSdk 25
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.jason.test.newsapp.runner.CustomUiRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        viewBinding true
    }

    dataBinding {
        enabled = true
    }

    testOptions {
        animationsDisabled = true
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    def nav_version = "2.4.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    androidTestImplementation("androidx.navigation:navigation-testing:$nav_version")

    implementation 'androidx.test.espresso:espresso-idling-resource:3.4.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    implementation 'com.android.databinding:viewbinding:7.0.4'
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "androidx.test:rules:1.4.0"

    def espresso_version = "3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"

    // Retrofit
    def retrofit_version = "2.7.2"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation("com.squareup.okhttp3:logging-interceptor:3.9.0")


    def mock_webserver_Version = '3.8.1'
    implementation "com.squareup.okhttp3:mockwebserver:$mock_webserver_Version"
//    testImplementation "com.squareup.okio:okio:2.8.0"



    def lifecycle_version = "2.4.0"
    def arch_version = "2.1.0"
    // ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version")
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version")
    // Annotation processor
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - Test helpers for LiveData
    androidTestImplementation "androidx.arch.core:core-testing:$arch_version"
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    // Dagger
    def dagger_version = "2.38.1"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"

    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // mockito
    def mockito_inline_version = "4.2.0"
    testImplementation "org.mockito:mockito-inline:$mockito_inline_version"

    def mockito_version = "3.10.0"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"

    // fragment-testing
    def fragment_version = "1.4.0"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    def coroutines_testing = "1.6.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_testing"

    def paging_version = "3.1.0"
    implementation "androidx.paging:paging-runtime:$paging_version"
    testImplementation "androidx.paging:paging-common:$paging_version"

    def room_version = "2.4.1"
    implementation("androidx.room:room-runtime:$room_version")
    annotationProcessor("androidx.room:room-compiler:$room_version")
    kapt("androidx.room:room-compiler:$room_version")
    implementation("androidx.room:room-ktx:$room_version")
    testImplementation("androidx.room:room-testing:$room_version")
    implementation("androidx.room:room-paging:$room_version")

    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")
}